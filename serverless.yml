service: make-a-new-promise

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - "@wizeline/serverless-amplify-plugin"
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs14.x
  region: ap-northeast-1
  stage: ${opt:stage, 'dev'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    Github_Access_Token: ${ssm:Github_Access_Token}
    Github_Repo: https://github.com/takahiro-impara/make_a_promise_frontend
    ITEM_TABLE: Items-${self:provider.stage}
    SIGNED_S3_BUCKET: serverless-udagram-item-${self:provider.stage}-koichi
    SIGNED_URL_EXPIRATION: 300
    USER_ID_INDEX: UserIdIndex
    REGION: ap-northeast-1

custom:
  documentation:
  api:
    info:
      version: v1.0.0
      title: make a promise API
      description: Serverless application for Make a promise with someone
    models:
      - name: ItemRequest
        contentType: application/json
        schema: ${file(./models/create-item-request.json)}
  amplify:
    repository: ${self:provider.environment.Github_Repo}
    accessToken: ${self:provider.environment.Github_Access_Token}
    branch: master
  dynamodb:
    stages:
      dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      development:
        sources:
          - table: ${self:provider.environment.ITEM_TABLE}
            sources: [./migrations/Items.json]

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  testapi:
    handler:
      src/lambda/http/testapi.handler
    events:
      - http:
          path: test
          method: get
          cors: true
          authorizer: Auth
  getItems:
    handler:
      src/lambda/http/getItems.handler
    events:
      - http:
          path: items
          method: get
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: 
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEM_TABLE}/index/${self:provider.environment.USER_ID_INDEX}

  createItem:
    handler:
      src/lambda/http/createItem.handler
    events:
      - http:
          path: item
          method: post
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new item
            description: Create a new item
            requestModels:
              'application/json': ItemRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEM_TABLE}

  deleteItem:
    handler:
      src/lambda/http/deleteItem.handler
    events:
      - http:
          path: item/{itemId}
          method: delete
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEM_TABLE}

  updateItem:
    handler:
      src/lambda/http/updateItem.handler
    events:
      - http:
          path: item/{itemId}
          method: patch
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEM_TABLE}
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: item/{itemId}/attachment
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.SIGNED_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEM_TABLE}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.SIGNED_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.SIGNED_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    ItemsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ITEM_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL